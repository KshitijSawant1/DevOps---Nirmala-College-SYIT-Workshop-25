Yes ‚Äî that structure looks correct for your static site demo:

```
Session 3/
  index.html
  styles.css
  script.js
  Jenkinsfile
```

* `index.html` ‚Üí main HTML page
* `styles.css` ‚Üí CSS styling
* `script.js` ‚Üí JavaScript logic
* `Jenkinsfile` ‚Üí pipeline definition Jenkins will use

Now, a couple of points to confirm:

1. **Location of Jenkinsfile**

   * If your Jenkins job is set to ‚ÄúPipeline script from SCM‚Äù and the **Script Path** is just `Jenkinsfile`, then the file should be in the **root of the repository**, not inside `Session 3`.
   * If you leave it in `Session 3/`, you must set the Script Path in Jenkins job to `Session 3/Jenkinsfile`.

2. **Static Site packaging**

   * The Jenkinsfile should point to your files. For example, if it is inside `Session 3/`, the Jenkinsfile should use that folder:

   ```groovy
   pipeline {
     agent any
     stages {
       stage('Checkout') { steps { checkout scm } }
       stage('Package') {
         steps {
           sh '''
             cd "Session 3"
             rm -rf dist && mkdir dist
             cp index.html styles.css script.js dist/
           '''
         }
       }
       stage('Archive') {
         steps {
           archiveArtifacts artifacts: 'Session 3/dist/**', fingerprint: true
         }
       }
     }
   }
   ```

Would you like me to rewrite your Jenkinsfile right now for the case where it **stays inside `Session 3/`**, so you don‚Äôt need to move it to the root?


Perfect ‚Äî you‚Äôve reached the **Pipeline setup screen** in Jenkins. Let‚Äôs finish configuring your **Session 3 static site pipeline**.

---

### Steps from here:

#### 1. Go to **Pipeline** tab

* **Definition** ‚Üí `Pipeline script from SCM`
* **SCM** ‚Üí `Git`
* **Repository URL** ‚Üí already same as in General:

  ```
  https://github.com/KshitijSawant1/DevOps---Nirmala-College-SYIT-Workshop-25.git
  ```
* **Branch Specifier** ‚Üí `*/main`
* **Script Path** ‚Üí `Session 3/Jenkinsfile`
  (since your Jenkinsfile is in that subfolder)

---

#### 2. Set build trigger (optional)

* If you want builds to run on **push** ‚Üí add a **GitHub webhook** (`http://<jenkins-url>/github-webhook/`).
* If you want builds to run on **schedule** ‚Üí enable **Poll SCM** with `H/2 * * * *`.

---

#### 3. Save and run

* Click **Save** ‚Üí **Build Now**.
* Jenkins will fetch your repo, run the `Jenkinsfile` pipeline, and package/ archive your static files (`index.html`, `styles.css`, `script.js`).

---

#### 4. Verify output

* On the **Build page** ‚Üí you‚Äôll see **Stage View** (Checkout ‚Üí Package ‚Üí Archive).
* Under **Artifacts**, your `dist/` folder with static files should appear.

---

üëâ If you‚Äôd like, I can also give you a **cleaner minimal Jenkinsfile** that only checks out and archives the HTML/CSS/JS files, so you don‚Äôt run into path issues. Would you like me to prepare that?



Great. We‚Äôll build a tiny Flask app with tests so it‚Äôs ready for an advanced Jenkins pipeline later.

---

## 1) Create the project layout

Use the same folder name we‚Äôll reference in the pipeline: **`Session 2/`**

```
Session 2/
  app.py
  requirements.txt
  tests/
    test_app.py
  .gitignore
```

---

## 2) Files

**Session 2/app.py**

```python
from flask import Flask, jsonify

app = Flask(__name__)

@app.route("/")
def home():
    return "Hello, DevOps Workshop with Flask!"

@app.route("/health")
def health():
    return jsonify(status="ok"), 200

if __name__ == "__main__":
    # 0.0.0.0 so Jenkins/other machines can reach it; use 5001 to avoid clashes
    app.run(host="0.0.0.0", port=5001)
```

**Session 2/requirements.txt**

```
flask==3.0.3
gunicorn==22.0.0
pytest==8.2.0
coverage==7.6.1
```

**Session 2/tests/test\_app.py**

```python
from app import app

def test_home_status():
    c = app.test_client()
    r = c.get("/")
    assert r.status_code == 200

def test_health_endpoint():
    c = app.test_client()
    r = c.get("/health")
    assert r.status_code == 200
    assert r.json["status"] == "ok"
```

**Session 2/.gitignore**

```
venv/
__pycache__/
*.pyc
.coverage
coverage.xml
dist/
```

---

## 3) Quick local verification (before wiring Jenkins)

### macOS / Linux

```bash
cd "Session 2"
python3 -m venv venv
. venv/bin/activate
pip install -r requirements.txt

# run app
python app.py
# open http://localhost:5001 and http://localhost:5001/health
# Ctrl+C to stop

# run tests + coverage
coverage run -m pytest -q
coverage xml -o coverage.xml
coverage report
```

### Windows (PowerShell or CMD)

```bat
cd "Session 2"
py -3 -m venv venv
venv\Scripts\activate
py -3 -m pip install -r requirements.txt

REM run app
py -3 app.py
REM open http://localhost:5001 and /health, then Ctrl+C

REM run tests + coverage
py -3 -m coverage run -m pytest -q
py -3 -m coverage xml -o coverage.xml
py -3 -m coverage report
```

If both routes respond (200) and tests pass, you‚Äôre ready for the next step (commit, push, then set up the Jenkins pipeline with parameters, reports, and notifications).
